#!/usr/bin/env python

"""
Post request, gets response From Bloomberg Transport and downloads the CVS file.
"""

import csv
import getpass
import json
import logging
import os
import sys
from shutil import copyfile

import pandas as pd
from sqlalchemy.exc import DBAPIError

from core.rest.client import ClientException
from etl.bbg_transport.dto import RequestDataItem, RequestItem, RequestOptionItem
from etl.core.util import parse_args
from etl.core.util import uri_get, uri_post
from etl.enum.cor_da.gen.bt_status import BtStatusEnum
from etl.enum.pim_da.gen.bbg_interface import BbgInterfaceEnum
from etl.enum.pim_da.gen.bbg_program import BbgProgramEnum
from etl.enum.pim_da.gen.dats_batch_status import DatsBatchStatusEnum
from etl.repo.fnd_cfdw.etl_config import EtlConfigRepo
from etl.repo.pim_da.dats_bbg_batch import DatsBbgBatchRepo
from etl.repo.pim_da.dats_bbg_batch_series import DatsBbgBatchSeriesRepo

USAGE = ['BGG DATS  Automation Agent', ['action', {'help': 'REQUEST or POLL'}]]

BBG_ERROR = DatsBatchStatusEnum.BBG_ERROR.value
BT_DONE = DatsBatchStatusEnum.BT_DONE.value
BT_ERROR = DatsBatchStatusEnum.BT_ERROR.value
SENT_TO_BT = DatsBatchStatusEnum.SENT_TO_BT.value
IN_QUEUE = DatsBatchStatusEnum.IN_QUEUE.value
HTTP_ERROR = DatsBatchStatusEnum.HTTP_ERROR.value

BBGERROR = BtStatusEnum.BBGERROR.value
BTERROR = BtStatusEnum.BTERROR.value
INITIAL = BtStatusEnum.INITIAL.value
PENDING = BtStatusEnum.PENDING.value
SUCCESS = BtStatusEnum.SUCCESS.value

GETDATA = BbgProgramEnum.GETDATA.value
GETHISTORY = BbgProgramEnum.GETHISTORY.value

SAPI = BbgInterfaceEnum.SAPI.value


class FetcherAgent(object):
    """
        This class Does the Fetching process.
    """

    def __init__(self):
        self.log = logging.getLogger("{}".format(
            os.path.splitext(os.path.basename(__file__))[0]))
        self.username = getpass.getuser()
        logging.info('Fetching the required values from the EtlConfig Repo')

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        if exc_type is None:
            pass

    @staticmethod
    def _get_request(repo, dats_bt_actions):

        data = []
        try:
            if dats_bt_actions['DATS_BT_REQ_ACTION'] == "REQUEST":
                logging.info('Getting requests from dats_bbg_batch table with IN_QUEUE status')
                data = repo.list_by_batch_status_code(IN_QUEUE or BT_ERROR)
            elif dats_bt_actions['DATS_BT_POLL_ACTION'] == "POLL":
                logging.info('Getting requests from dats_bbg_batch ''table with SENT_TO_BT')
                data = repo.list_by_batch_status_code(SENT_TO_BT)
            return data
        except DBAPIError as err:
            logging.error(err)


class RequestAgent(FetcherAgent):
    """
        This class posts request to Bloomberg Transport.
    """

    def _get_priority_list(self, results):

        logging.info('Prioritizing the list as per bbg_program_code '
                     'with GETDATA as high priority')
        data_list = []
        history_list = []
        map(lambda x: data_list.append(x) if x.bbg_program_code == GETDATA else history_list.append(x), results)
        lists = self._get_priority_list_by_interface_code(data_list) + self._get_priority_list_by_interface_code(history_list)
        return lists

    def _get_priority_list_by_interface_code(self, results):

        logging.info('Re-Prioritizing the list as per bbg_interface_code,''with SAPI as high priority')
        plist = []
        map(lambda x: plist.insert(0, x) if x.bbg_interface_code == SAPI else plist.append(x), results)
        return plist

    def _get_request_object(self, obj, result_series):

        logging.info('Preparing the Request Object')
        data_items = [RequestDataItem(tag=i.dats_code, bbg_query=i.bbg_query) for i in result_series]
        headers = self._get_headers(obj)
        fields = self._get_request_fields(result_series)
        request_options = [RequestOptionItem(option_name=key, option_value=headers[key]) for key in headers]
        request = RequestItem(request_description=EtlConfigRepo.instance.
                              get_by_config_code('DATS_BT_DESCRIPTION').config_value,
                              requestor_code=EtlConfigRepo.instance.
                              get_by_config_code('DATS_BT_REQ_CODE').config_value,
                              program_code=obj.bbg_program_code,
                              interface_code=obj.bbg_interface_code,
                              response_format_code=EtlConfigRepo.instance.
                              get_by_config_code('DATS_BT_FORMAT').config_value,
                              request_data_items=data_items,
                              request_options=request_options,
                              request_fields=fields)
        logging.info('Converting the Request Object to json format')
        return json.dumps(request.to_json())

    def _get_headers(self,obj):

        headers = {}
        header_list = ['PROGRAMFLAG','COMPRESS', 'FIRMNAME','PROGRAMNAME','USERNUMBER']
        gh_range = str(obj.asof_start_date_key) + "|" + str(obj.asof_end_date_key)
        pc_dict = {GETDATA: [GETDATA.lower()],GETHISTORY: [GETHISTORY.lower(), gh_range]}
        if obj.bbg_program_code == GETHISTORY:
            headers['DATERANGE'] = pc_dict[obj.bbg_program_code][1]
        for i in header_list:
            headers[i] = EtlConfigRepo.instance.get_by_config_code(i).config_value
        return headers

    def _get_request_fields(self, result_series):

        request_fields_list = []
        for i in result_series:
            request_fields_list.append(i.mnemonic)

        return list(set(request_fields_list))

    def _post_to_bt(self, payload, end_point, obj, db_repo):

        logging.info('Sending the request to BT')
        logging.info('POST: %s, \r\n\t%s', end_point, payload)
        try:
            response = uri_post(end_point + 'request_data', payload)
            logging.info('response: %s \r\nresponse:\t%s', end_point, response)
            return response
        except ClientException as ex:
            logging.error(ex)
            self._update_request(obj.batch_id, None, None,
                                 payload, HTTP_ERROR, db_repo)


    def _update_request(self, batch_id, bt_request_id, bt_status_code, request_obj, batch_status_code, repo):

        logging.info('Updating the staging the table')
        try:
            update_row = repo.get_by_batch_id(batch_id)
            update_row.batch_status_code = batch_status_code
            update_row.bt_request_id = bt_request_id
            update_row.bt_status_code = bt_status_code
            update_row.bt_request_payload = request_obj
            repo.save(update_row)
        except DBAPIError as ex:
            logging.error(ex)

    def run(self, action, ref_actions):
        """
        Get the response for all the requests and  update the table.
        """
        db_repo = DatsBbgBatchRepo()
        result = self._get_request(db_repo, action, ref_actions)
        priority_list = self._get_priority_list(result)
        repo = DatsBbgBatchSeriesRepo()
        for i in priority_list:
            logging.info("Fetching the records with batch_id" + ' ' + str(i.batch_id))
            try:
                result_batch = repo.list_by_batch_id(i.batch_id)
                obj = self._get_request_object(i, result_batch)
                response = self._post_to_bt(obj, ref_actions['DATS_BT_ENDPOINT'], i, db_repo)
                self._update_request(i.batch_id, response['request_id'],
                                     str(response['request_status']),
                                     str(obj), SENT_TO_BT, db_repo)
            except Exception as ex:
                logging.error(ex)


class ResponseAgent(FetcherAgent):
    """
        This class gets the response from the Bloomberg Transport.
    """


    def _get_request_status_by_url(self, obj, end_point):

        logging.info('Sending the check status request to BT')
        logging.info('GET: %s, \r\n\t%s', end_point, str(obj.bt_request_id))
        try:
            response = uri_get(end_point + 'check_status' + '/' + str(obj.bt_request_id))
            logging.info('response: %s \r\nresponse:\t%s', end_point, response)
            return response
        except Exception as ex:
            logging.error(ex)

    def _update_request(self, data_file_path, batch_id,
                        bt_status_code, repo):

        logging.info('Updating the staging the table')
        status_dict = {BBGERROR: BBG_ERROR, BTERROR: BT_ERROR, SUCCESS: BT_DONE}
        try:
            update_row = repo.get_by_batch_id(batch_id)
            if bt_status_code not in [PENDING, INITIAL]:
                update_row.batch_status_code = status_dict[bt_status_code]
                update_row.bt_response_file_path = data_file_path
            update_row.bt_status_code = bt_status_code
            repo.save(update_row)
        except DBAPIError as err:
            logging.error(err)

    def copy_file(self, src, dst, program_code, batch_id):

        dats_bt_getdata_ext = EtlConfigRepo.instance.get_by_config_code('DATS_BT_GETDATA_EXT').config_value
        dats_bt_gethis_ext = EtlConfigRepo.instance.get_by_config_code('DATS_BT_GETHIS_EXT').config_value

        if not os.path.isdir(dst):
            logging.info("Can't copy %s to destination: %s", src, dst)
            raise Exception('Destination path is incorrect: %s', dst)

        destination_file = os.path.basename(src)
        date, req_id, ext = destination_file.split('.')
        if program_code == GETDATA:
            ext = dats_bt_getdata_ext + '.' + ext
        else:
            ext = dats_bt_gethis_ext + '.' + ext
        destination_file = 'BBG_' + date + '_' + \
                           str(batch_id) + '_' + req_id + ext
        dst = os.path.join(dst, destination_file)
        logging.info("Copying %s to %s", src, dst)
        copyfile(src, dst)
        self.validate_csv(dst)


    def validate_csv(self, csv_file):

        df = pd.read_csv(csv_file)
        values = []
        for i in df["REQUESTOR_TAG"]:
            if i.startswith("##") and i.endswith("##"):
                i = i[2:-2]
            values.append(i)
            df["REQUESTOR_TAG"] = values
        df.to_csv(csv_file, index=False, quoting=csv.QUOTE_ALL)

    def run(self, action, ref_actions):
        """
        Get the response for all the requests and  update the table.
        """
        dats_bt_file_path = EtlConfigRepo.instance.get_by_config_code('DATS_BT_FILE_PATH').config_value
        db_repo = DatsBbgBatchRepo()
        result = self._get_request(db_repo, ref_actions)
        for i in result:
            response = self._get_request_status_by_url(i, ref_actions['DATS_BT_ENDPOINT'])
            if response['request_status'] == SUCCESS:
                self.copy_file(response['data_file_path'].strip(),dats_bt_file_path, i.bbg_program_code, i.batch_id)
            self._update_request(response['data_file_path'], i.batch_id, response['request_status'], db_repo)

def getActions(action_list):
    ref_actions = {}
    for i in action_list:
        ref_actions[i] =EtlConfigRepo.instance.get_by_config_code(i).config_value
    return ref_actions

def main():
    logger = logging.getLogger("{}".format(os.path.splitext(os.path.basename(__file__))[0]))
    args = parse_args(*USAGE)
    user_action = args.action.upper()
    option = {'REQUEST': {'agent_name': 'Request Agent', 'agent_class': RequestAgent},
              'POLL': {'agent_name': 'Response Agent', 'agent_class': ResponseAgent}}

    if user_action in option.keys():
        try:
            ref_actions = getActions(['DATS_BT_REQ_ACTION','DATS_BT_POLL_ACTION','DATS_BT_ENDPOINT'])
            logging.info("%s started", option[user_action]['agent_name'])
            with option[user_action]['agent_class']() as agent:
                agent.run(user_action, ref_actions)
        except Exception as ex:
            logger.critical("%s exiting with error: %s", option[user_action]['agent_name'], ex)
            raise
        else:
            logger.info("%s Successfully completed.", option[user_action]['agent_name'])
    else:
        raise RuntimeError('Unknown action specified: {}'.format(user_action))
    return 0


if __name__ == "__main__":
    sys.exit(main())
