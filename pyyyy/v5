import argparse

import pytest
from mock import patch
from pytest import fixture

from bbg_ff import bbg_5
from bbg_ff.bbg_5 import FetcherAgent, RequestAgent, ResponseAgent
from etl.core.util import struct

patch.object = patch.object
FETCH_INSTANCE = FetcherAgent()
REQUEST_INSTANCE = RequestAgent()
RESPONSE_INSTANCE = ResponseAgent()
RESULT = ['Test', 'Test2']
X_OPTIONS = ['REQUEST', 'POLL']
MODULE_UNDER_TEST = 'bbg_ff.bbg_5'
RESPONSE = {
    "request_status": "SUCCESS",
    "request_id": "19910",
    "data_file_path": "/test/bbg_transport/in/20180709.19910.csv"}
DESTINATION = '/test_folder/test/'
REQUEST = 'REQUEST'


@pytest.mark.parametrize('options', X_OPTIONS)
def test_main_method_with_valid_inputs(x, options):
    x.parse_args.return_value = argparse.Namespace(action=options)
    test_result = bbg_5.main()
    assert test_result == 0


def test_main_exit_with_exception_when_input_not_in_options(x):
    x.parse_args.return_value = 'test'
    with pytest.raises(Exception):
        bbg_5.main()


def test_request_run_method_exception(x):
    x.parse_args.return_value = argparse.Namespace(action='REQUEST')
    x.rgp.return_value = [x.query]
    x.DatsBbgBatchSeriesRepo().list_by_batch_id().side_effect = RuntimeError
    bbg_5.main()
    with pytest.raises(Exception):
        # noinspection PyArgumentList
        RequestAgent.run()


def test_get_request_invalid_option_should_return_empty_list(x):
    result_set = FETCH_INSTANCE._get_request(x.repo, 'Invalid')
    assert len(result_set) == 0


def test_get_headers(x):
    x.rgp.return_value = [x.query]
    REQUEST_INSTANCE.run()
    x.gh.assert_called_with(x.query)


def test_get_request_fields(x):
    x.rgp.return_value = [x.query]
    REQUEST_INSTANCE.run()
    x.gf.assert_called_with(x.query_series)


@pytest.mark.parametrize('options', X_OPTIONS)
def test_get_request_valid_input(x, options):
    x.repo.list_by_batch_status_code.return_value = RESULT
    result_list = FETCH_INSTANCE._get_request(x.repo, options)
    assert isinstance(result_list, list)


def test_get_request_with_request_option_exception(x):
    x.query.side_effect = RuntimeError()
    x.EtlConfigRepo.instance. \
        get_by_config_code.return_value.config_value = X_OPTIONS[0]
    with pytest.raises(Exception):
        # noinspection PyArgumentList
        FetcherAgent._get_request(x.repo, X_OPTIONS[0])


def test_get_request_with_poll_option_exception(x):
    x.query.side_effect = RuntimeError()
    x.EtlConfigRepo.instance. \
        get_by_config_code.return_value.config_value = X_OPTIONS[1]
    with pytest.raises(Exception):
        # noinspection PyArgumentList
        FetcherAgent._get_request(x.repo, X_OPTIONS[1])


def test_main_method_run_method_throws_exception(x):
    x.parse_args.return_value = argparse.Namespace(action='POLL')
    x.repo.side_effect = RuntimeError()
    with pytest.raises(Exception):
        bbg_5.main()


def test_request_get_request_call(x):
    REQUEST_INSTANCE.run()
    x.rqg.assert_called_with(x.repo(), x.parameter)


def test_get_priority_list_call(x):
    result = x.rqg()
    REQUEST_INSTANCE.run()
    x.rgp.assert_called_with(result)


def test_request_update_request_call(x):
    x.rgp.return_value = [x.query]
    x.po.return_value = RESPONSE
    REQUEST_INSTANCE.run()
    x.rqu.assert_called_with(x.query.batch_id, '19910', 'SUCCESS',
                             str(REQUEST_INSTANCE._get_request_object(x.rqg, x.query_series)),
                             'SENT_TO_BT', x.repo())


def test_response_get_request(x):
    RESPONSE_INSTANCE.run()
    x.rgr.assert_called_with(x.repo(), x.parameter)


def test_post_to_bt(x):
    x.rgp.return_value = [x.rqg]
    obj = REQUEST_INSTANCE._get_request_object(x.rqg, x.query_series)
    REQUEST_INSTANCE.run()
    x.po.assert_called_with(obj)


def test_get_request_status_by_url(x):
    x.rgr.return_value = [x.query]
    RESPONSE_INSTANCE.run()
    x.gs.assert_called_with(x.query)


def test_copy_file(x):
    x.rgr.return_value = [x.query]
    x.gs.return_value = RESPONSE
    RESPONSE_INSTANCE.run()
    x.cf.assert_called_with(RESPONSE['data_file_path'], x.parameter,
                            x.bbg_program_code, x.batch_id)


def test_update_request(x):
    x.rgr.return_value = [x.query]
    x.gs.return_value = RESPONSE
    RESPONSE_INSTANCE.run()
    x.ur.assert_called_with(RESPONSE['data_file_path'], x.batch_id,
                            RESPONSE['request_status'], x.repo())


'''Helpers'''


@pytest.fixture(name='x_copy_file')
def copy_file_fixture():
    with patch.object(ResponseAgent, 'copy_file') as x:
        yield x


@pytest.fixture(name='x_get_st')
def get_request_status_by_url_fixture():
    with patch.object(ResponseAgent, '_get_request_status_by_url') as x:
        yield x


@pytest.fixture(name='x_repo')
def dats_bbg_batch_repo_fixture():
    with patch(MODULE_UNDER_TEST + '.DatsBbgBatchRepo') as x:
        yield x


@pytest.fixture(name='x_dats_bbg_batch_seriesrepo')
def dats_bbg_batch_series_repo_fixture():
    with patch(MODULE_UNDER_TEST + '.DatsBbgBatchSeriesRepo') as x:
        yield x


@pytest.fixture(name='x_get_request_fields')
def get_request_fields_fixture():
    with patch.object(RequestAgent, '_get_request_fields') as x:
        yield x


@pytest.fixture(name='x_json')
def json_fixture():
    with patch(MODULE_UNDER_TEST + '.json') as x:
        yield x


@pytest.fixture(name='x_get_request_object')
def get_request_object_fixture():
    with patch.object(RequestAgent, '_get_request_object') as x:
        yield x


@pytest.fixture(name='x_post_obj')
def post_to_bt_fixture():
    with patch.object(RequestAgent, '_post_to_bt') as x:
        yield x


@pytest.fixture(name='x_etl_config_repo')
def etl_config_repo_fixture():
    with patch(MODULE_UNDER_TEST + '.EtlConfigRepo') as x:
        yield x


@pytest.fixture(name='x_get_pri')
def get_priority_list_fixture():
    with patch.object(RequestAgent, '_get_priority_list') as x:
        yield x


@pytest.fixture(name='x_req_get_req')
def request_get_request_fixture():
    with patch.object(RequestAgent, '_get_request') as x:
        yield x


@pytest.fixture(name='x_req_up')
def request_update_request_fixture():
    with patch.object(RequestAgent, '_update_request') as x:
        yield x


@pytest.fixture(name='x_get_headers')
def get_headers_fixture():
    with patch.object(RequestAgent, '_get_headers') as x:
        yield x


@pytest.fixture(name='x_res_get_req')
def response_get_request_fixture():
    with patch.object(ResponseAgent, '_get_request') as x:
        yield x


@pytest.fixture(name='x_update_request')
def update_request_fixture():
    with patch.object(ResponseAgent, '_update_request') as x:
        yield x


@fixture(name='x', scope='function')
def mother(x_parse_args, x_repo, x_get_pri, x_dats_bbg_batch_seriesrepo,
           x_req_get_req, x_etl_config_repo, x_post_obj, x_req_up,
           x_res_get_req, x_get_st, x_update_request,
           x_copy_file, x_get_headers, x_json,
           x_get_request_fields):
    x_query = x_repo.list_by_batch_status_code
    x_query_series = x_dats_bbg_batch_seriesrepo().list_by_batch_id()
    x_parameter = x_etl_config_repo.instance.get_by_config_code().config_value
    x_bbg_program_code = x_query.bbg_program_code
    x_batch_id = x_query.batch_id
    return struct(parse_args=x_parse_args, repo=x_repo,
                  rgp=x_get_pri, query=x_query,
                  DatsBbgBatchSeriesRepo=x_dats_bbg_batch_seriesrepo,
                  rqg=x_req_get_req, EtlConfigRepo=x_etl_config_repo,
                  parameter=x_parameter, po=x_post_obj,
                  rqu=x_req_up, query_series=x_query_series, rgr=x_res_get_req,
                  gs=x_get_st, ur=x_update_request, cf=x_copy_file,
                  bbg_program_code=x_bbg_program_code,
                  batch_id=x_batch_id, gh=x_get_headers,
                  gf=x_get_request_fields, json=x_json)
