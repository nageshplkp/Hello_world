#!/usr/bin/env python

"""
Post request, get response From Bloomberg Transport and downloading the CVS file.
"""

import getpass
import json
import logging
import os
import sys
from shutil import copyfile

from requests import RequestException
from sqlalchemy.exc import DBAPIError
from sqlalchemy import or_

from etl.bbg_transport.dto import RequestDataItem, RequestItem, RequestOptionItem
from etl.core.util import parse_args
from etl.core.util import uri_get, uri_post
from etl.enum.cor_da.gen.bt_status import BtStatusEnum
from etl.enum.pim_da.gen.bbg_program import BbgProgramEnum
from etl.enum.pim_da.gen.bbg_interface import BbgInterfaceEnum
from etl.enum.pim_da.gen.dats_batch_status import DatsBatchStatusEnum
from etl.repo.fnd_cfdw.etl_config import EtlConfigRepo
from etl.repo.pim_da.dats_bbg_batch import DatsBbgBatchRepo
from etl.repo.pim_da.dats_bbg_batch_series_vw import DatsBbgBatchSeriesVwRepo

USAGE = ['BGG DATS  Automation Agent', ['action', {'help': 'REQUEST or POLL'}]]

DATS_BT_ENDPOINT = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_ENDPOINT').config_value
DATS_BT_DESCRIPTION = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_DESCRIPTION').config_value
DATS_BT_FORMAT = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_FORMAT').config_value
DATS_BT_REQ_CODE = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_REQ_CODE').config_value
DATS_BT_FILE_PATH = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_FILE_PATH').config_value
DATS_BT_POLL_ACTION = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_POLL_ACTION').config_value
DATS_BT_REQ_ACTION = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_REQ_ACTION').config_value
DATS_BT_GETDATA_EXT = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_GETDATA_EXT').config_value
DATS_BT_GETHIS_EXT = EtlConfigRepo.instance. \
    get_by_config_code('DATS_BT_GETHIS_EXT').config_value

BBG_ERROR = DatsBatchStatusEnum.BBG_ERROR.value
BT_DONE = DatsBatchStatusEnum.BT_DONE.value
BT_ERROR = DatsBatchStatusEnum.BT_ERROR.value
SENT_TO_BT = DatsBatchStatusEnum.SENT_TO_BT.value
IN_QUEUE = DatsBatchStatusEnum.IN_QUEUE.value

BBGERROR = BtStatusEnum.BBGERROR.value
BTERROR = BtStatusEnum.BTERROR.value
INITIAL = BtStatusEnum.INITIAL.value
PENDING = BtStatusEnum.PENDING.value
SUCCESS = BtStatusEnum.SUCCESS.value

GETDATA = BbgProgramEnum.GETDATA.value
GETHISTORY = BbgProgramEnum.GETHISTORY.value

SAPI = BbgInterfaceEnum.SAPI.value


class FetcherAgent(object):
    """
        This class Does the Fetching operations.
    """

    def __init__(self):
        self.log = logging.getLogger("{}".format(
            os.path.splitext(os.path.basename(__file__))[0]))
        self.username = getpass.getuser()

    def __enter__(self):
        # make a database connection and return it
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        if exc_type is None:
            # No exception
            pass

    @classmethod
    def get_request(cls, repo, option):
        """
        get_request(repo) -> Object
        Return object with IN_QUEUE as batch_status_code.
        :param repo: Object
        :param option: Str
        :return: Object
        """
        model = repo.model
        data = []
        try:
            if option == DATS_BT_REQ_ACTION:
                logging.info('Getting requests from dats_bbg_batch table with IN_QUEUE status')
                data = repo.query.filter(or_(model.batch_status_code == IN_QUEUE,
                                         model.batch_status_code == BT_ERROR)).all()
            elif option == DATS_BT_POLL_ACTION:
                logging.info('Getting requests from dats_bbg_batch '
                             'table with SENT_TO_BT')
                data = repo.query.filter(model.batch_status_code == SENT_TO_BT).all()
            return data
        except DBAPIError as err:
            logging.error(err)


class RequestAgent(FetcherAgent):
    """
        This class posts request to Bloomberg Transport.
    """

    def __init__(self):
        super(RequestAgent, self).__init__()
        logging.info('Fetching the required values from the EtlConfig Repo')
        try:
            self.base_url = DATS_BT_ENDPOINT
            self.description = DATS_BT_DESCRIPTION
            self.response_format = DATS_BT_FORMAT
            self.requestor_code = DATS_BT_REQ_CODE
        except Exception as ex:
            self.log.critical(
                "Unable to initialize %s: %s", self.__class__.__name__, ex)
            raise

    def get_priority_list(self, results):
        """
        get_priority_list(result) -> List of Objects
        Return prioritized list of Objects
        :param results: Object
        :return: List of Objects
        """
        logging.info('Prioritizing the list as per bbg_program_code '
                     'with GETDATA as high priority')
        data_list = []
        history_list = []
        for i in results:
            if i.bbg_program_code == GETDATA:
                data_list.append(i)
            else:
                history_list.append(i)
        lists = [data_list, history_list]
        data_list, history_list = [self.get_priority_list_by_interface_code(x) for x in lists]
        plist = data_list + history_list
        return plist

    @staticmethod
    def get_priority_list_by_interface_code(results):
        """
        get_priority_list_by_interface_code(result) -> List of Objects
        Return prioritized list of Objects
        :param results: Object
        :return: List of Objects
        """
        logging.info('Re-Prioritizing the list as per bbg_interface_code,'
                     'with SAPI as high priority')
        plist = []
        for i in results:
            if i.bbg_interface_code == SAPI:
                plist.insert(0, i)
            else:
                plist.append(i)
        return plist

    def get_request_object(self, obj, result_series):
        """
        get_request_object(self, obj, result_series) -> Json
        Return Json constructed from the input objects.
        :param obj: Object
        :param result_series: Object
        :return: Json
        """
        logging.info('Preparing the Request Object')
        data_items = [RequestDataItem(tag=i.dats_code, yellow_key=i.bbg_yellow,
                                      ticker=i.bbg_ticker) for i in result_series]
        headers = self.get_headers(obj)
        fields = self.get_request_fields(result_series)
        request_options = [RequestOptionItem(option_name=key, option_value=headers[key])
                           for key in headers]
        request = RequestItem(request_description=self.description,
                              requestor_code=self.requestor_code,
                              program_code=obj.bbg_program_code,
                              interface_code=obj.bbg_interface_code,
                              response_format_code=self.response_format,
                              request_data_items=data_items,
                              request_options=request_options,
                              request_fields=fields)
        logging.info('Converting the Request Object to json format')
        payload = json.dumps(request.to_json())
        return payload

    @staticmethod
    def get_headers(obj):
        """
        Return string of value obtained from Object.
        get_headers(obj) -> str
        :param obj: Object
        :return: str
        """
        headers = {}
        gd_range = str(obj.asof_end_date_key) + "|" + str(obj.asof_end_date_key)
        gh_range = str(obj.asof_start_date_key) + "|" + str(obj.asof_end_date_key)
        pc_dict = {GETDATA: gd_range, GETHISTORY: gh_range}
        headers['DATERANGE'] = pc_dict[obj.bbg_program_code]
        return headers

    @staticmethod
    def get_request_fields(result_series):
        """
        Return List obtained from Object.
        get_request_fields(result_series) -> List
        :param result_series:
        :return:
        """
        request_fields_list = []
        for i in result_series:
            request_fields_list.append(i.bbg_mnemonic)

        return list(set(request_fields_list))

    def post_to_bt(self, payload):
        """
        post_to_bt(payload) -> Json
        Return Json, response from BT
        :param payload: Json
        :return: Json
        """
        logging.info('Sending the request to BT')
        logging.info('POST: %s, \r\n\t%s', self.base_url, payload)
        try:
            response = uri_post(self.base_url + 'request_data', payload)
            logging.info('response: %s \r\nresponse:\t%s', self.base_url, response)
            return response
        except RequestException as ex:
            logging.error(ex)

    @staticmethod
    def update_request(batch_id, bt_request_id, bt_status_code,
                       request_obj, batch_status_code, repo):
        """
        :param batch_id: Int
        :param bt_request_id: Int
        :param bt_status_code: Str
        :param request_obj: Json
        :param batch_status_code: Str
        :param repo: Object
        """
        logging.info('Updating the staging the table')
        model = repo.model
        try:
            update_row = repo.query.filter(model.batch_id == batch_id).one()
            update_row.batch_status_code = batch_status_code
            update_row.bt_request_id = bt_request_id
            update_row.bt_status_code = bt_status_code
            update_row.bt_request_payload = request_obj
            repo.save(update_row)
        except DBAPIError as ex:
            logging.error(ex)

    def run(self):
        """
        Get the response for all the requests and  update the table.
        """
        db_repo = DatsBbgBatchRepo()
        result = self.get_request(db_repo, DATS_BT_REQ_ACTION)
        priority_list = self.get_priority_list(result)
        repo = DatsBbgBatchSeriesVwRepo()
        model = repo.model
        for i in priority_list:
            logging.info("Fetching the records with batch_id" + ' ' + str(i.batch_id))
            try:
                result_batch = repo.query.filter(model.batch_id == i.batch_id).all()
                obj = self.get_request_object(i, result_batch)
                response = self.post_to_bt(obj)
                self.update_request(i.batch_id, response['request_id'],
                                    str(response['request_status']),
                                    str(obj), SENT_TO_BT, db_repo)
            except RequestException as ex:
                logging.error(ex)


class ResponseAgent(FetcherAgent):
    """
        This class gets the response from the Bloomberg Transport.
    """

    def __init__(self):
        super(ResponseAgent, self).__init__()
        try:
            self.base_url = DATS_BT_ENDPOINT
            self.destination = DATS_BT_FILE_PATH
        except ValueError as ex:
            self.log.critical("Unable to initialize %s: %s", self.__class__.__name__, ex)

    def get_request_status_by_url(self, obj):
        """
        Return Json by GET method.
        :param obj: Object
        :return: Json
        """
        logging.info('Sending the check status request to BT')
        logging.info('GET: %s, \r\n\t%s', self.base_url, str(obj.bt_request_id))
        try:
            response = uri_get(self.base_url + 'check_status' + '/' + str(obj.bt_request_id))
            logging.info('response: %s \r\nresponse:\t%s', self.base_url, response)
            return response
        except RequestException as ex:
            logging.error(ex)

    @staticmethod
    def update_request(data_file_path, bt_request_id,
                       bt_status_code, repo):
        """
        :param data_file_path: Str
        :param bt_request_id: Int
        :param bt_status_code: Str
        :param repo: Object
        """
        logging.info('Updating the staging the table')
        model = repo.model
        status_dict = {BBGERROR: BBG_ERROR, BTERROR: BT_ERROR, SUCCESS: BT_DONE}
        try:
            update_row = repo.query.filter(model.bt_request_id == bt_request_id).one()
            if bt_status_code not in [PENDING, INITIAL]:
                update_row.batch_status_code = status_dict[bt_status_code]
                update_row.bt_response_file_path = data_file_path
            update_row.bt_status_code = bt_status_code
            repo.save(update_row)
        except DBAPIError as err:
            logging.error(err)

    @staticmethod
    def copy_file(src, dst, program_code, batch_id):
        """
        copy_file(src, dst, program_code) -> Bool
        Take src, dst and program_code as agrs and copy the file
        if successful return True else False.
        :param src: str
        :param dst: str
        :param program_code: str
        :param batch_id : int
        :return: Bool
        """
        if os.path.isdir(dst):
            destination_file = os.path.basename(src)
            date, _, ext = destination_file.split('.')
            if program_code == GETDATA:
                ext = DATS_BT_GETDATA_EXT + '.' + ext
            else:
                ext = DATS_BT_GETHIS_EXT + '.' + ext
            destination_file = 'BBG_' + date + '_' + str(batch_id) + ext
            dst = os.path.join(dst, destination_file)
            logging.info("Copying %s to %s", src, dst)
            copyfile(src, dst)
        else:
            logging.info("Can't copy %s to destination: %s", src, dst)
            raise Exception('Destination path is incorrect: %s', dst)

    def run(self):
        """
        Get the response for all the requests and  update the table.
        """
        db_repo = DatsBbgBatchRepo()
        result = self.get_request(db_repo, DATS_BT_POLL_ACTION)
        for i in result:
            response = self.get_request_status_by_url(i)
            if response['request_status'] == SUCCESS:
                self.copy_file(response['data_file_path'].strip(),
                               self.destination, i.bbg_program_code, i.batch_id)
            self.update_request(response['data_file_path'], response['request_id'],
                                response['request_status'], db_repo)


def main():
    """
    Delegates all processing to Agent instance.
    """
    logger = logging.getLogger("{}".format(os.path.splitext(os.path.basename(__file__))[0]))
    args = parse_args(*USAGE)
    action = args.action.upper()
    option = {'REQUEST': {'agent_name': 'Request Agent', 'agent_class': RequestAgent},
              'POLL': {'agent_name': 'Response Agent', 'agent_class': ResponseAgent}}
    if action in option.keys():
        try:
            logging.info("%s started", option[action]['agent_name'])
            with option[action]['agent_class']() as agent:
                agent.run()
        except Exception as ex:
            logger.critical("%s exiting with error: %s", option[action]['agent_name'], ex)
            return -1
        else:
            logger.info("%s Successfully completed.", option[action]['agent_name'])

    else:
        raise RuntimeError('Unknown action specified: {}'.format(action))
    return 0


if __name__ == "__main__":
    sys.exit(main())
