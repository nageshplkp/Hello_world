from django.utils.translation import ugettext_lazy as _
from django.contrib.admin.filters import *


class ColumnsListFilter(SimpleListFilter):
    parameter_name = 'columns'
    parameter_name_in = '%s__in' % parameter_name
    template = 'admin/multiselectfilter.html'
    title = _('Columns')

    def __init__(self, request, params, model, model_admin):
        self.model = model
        self.model_admin = model_admin
        self.request = request

        super(ColumnsListFilter, self).__init__(request, params, model, model_admin)

        self.used_parameters.clear()
        for p in self.expected_parameters():
            if p in params:
                value = params.pop(p)
                self.used_parameters[p] = prepare_lookup_value(p, value)

        value = self.value()
        if value and value != '' and value != 'all':
            model_admin.user_list_display[request.user] = value

    def expected_parameters(self):
        return [self.parameter_name, self.parameter_name_in]

    def value(self):
        for o in self.expected_parameters():
            value = self.used_parameters.get(o)
            if value:
                return value

        return None

    def lookups(self, request, model_admin):
        return [field for field in self.model._meta.fields]

    def choices(self, changelist):
        selected_values = self.model_admin.get_list_display(self.request)

        for o in self.lookup_choices:
            display = o.verbose_name
            val = o.name

            yield {
                'selected': selected_values.__contains__(val),
                'query_string': changelist.get_query_string({
                    self.parameter_name_in: val,
                }),
                'display': display,
                'value': val
            }

    def queryset(self, request, queryset):
        return queryset


class MultiSelectFieldListFilter(AllValuesFieldListFilter):
    template = 'admin/multiselectfilter.html'

    def __init__(self, field, request, params, model, model_admin, field_path):
        self.lookup_kwarg_in = '%s__in' % field_path
        self.lookup_val_in = request.GET.get(self.lookup_kwarg_in, None)

        super(MultiSelectFieldListFilter, self).__init__(field, request, params, model, model_admin, field_path)

    def expected_parameters(self):
        return [self.lookup_kwarg, self.lookup_val_isnull, self.lookup_kwarg_in]

    def choices(self, changelist):
        selected_value = self.lookup_val if self.lookup_val else None
        selected_values = self.lookup_val_in.split(',') if self.lookup_val_in else []

        for val in self.lookup_choices:
            if val is None:
                yield {
                    'selected': self.lookup_val_isnull != None,
                    'query_string': changelist.get_query_string({
                        self.lookup_kwarg_isnull: 'True',
                    }),
                    'display': _('No Value'),
                    'value': 'True'
                }
            else:
                yield {
                    'selected': (selected_value and selected_value == val) or selected_values.__contains__(val),
                    'query_string': changelist.get_query_string({
                        self.lookup_kwarg: val,
                    }),
                    'display': val,
                    'value': val
                }


class NullListFilter(FieldListFilter):
    list_display = []
    model_admin = None

    def __init__(self, field, request, params, model, model_admin, field_path):
        self.lookup_kwarg = '%s__isnull' % field_path
        self.lookup_val = request.GET.get(self.lookup_kwarg, None)

        super(NullListFilter, self).__init__(field, request, params, model, model_admin, field_path)
        self.model_admin = model_admin
        self.list_display = model_admin.list_display

    def expected_parameters(self):
        return [self.lookup_kwarg]

    def choices(self, cl):
        for lookup, title in (
                (None, _('All')),
                ('False', _('Has Value')),
                ('True', _('No Value'))):
            yield {
                'selected': self.lookup_val == lookup,
                'query_string': cl.get_query_string({
                    self.lookup_kwarg: lookup, }),
                'display': title,
            }


FieldListFilter.register(lambda f: True, MultiSelectFieldListFilter)
FieldListFilter.register(lambda f: True, NullListFilter)
