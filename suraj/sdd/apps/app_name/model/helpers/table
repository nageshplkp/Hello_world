# coding=utf-8
"""===========================================================================
DESCRIPTION:  Generated for BT_REQUEST

AUTHOR:       Generated by DA AutoGen (PIMCO\johntran)

DATE:         Jul  3 2018 11:34AM

!!! DO NOT MODIFY THIS FILE !!! 

To override/extend the class in this file, you'll have to do the following:
   * Create a folder called 'overrides'
   * Create a file with the same name as this file
   * The new file should contain a class with the same name as the of the class you want to override/extend
===========================================================================
"""

from __future__ import unicode_literals
from core.helpers import OverridableBase
from ..model_base import *


class FieldNames():
    bt_request_id='bt_request_id'
    bbg_program_code='bbg_program_code'
    bbg_interface_code='bbg_interface_code'
    bt_requestor_code='bt_requestor_code'
    bt_status_code='bt_status_code'
    response_format_code='response_format_code'
    lookback_bt_request_id='lookback_bt_request_id'
    request_description='request_description'
    request_date='request_date'
    status_date='status_date'
    request_object_data='request_object_data'
    callback_uri='callback_uri'
    data_file_path='data_file_path'
    process_date='process_date'
    retry_count='retry_count'
    requestor_login='requestor_login'
    request_data_hash='request_data_hash'
    row_insert_by='row_insert_by'
    row_insert_date='row_insert_date'
    row_update_by='row_update_by'
    row_update_date='row_update_date'


class ModelFieldHelper(OverridableBase):
    db_schema_name = 'DA_OWN'
    db_table_name = 'BT_REQUEST'
    model_class_name = 'BtRequest'
    model_class_name_lower = 'btrequest'
    model_verbose_name = 'Bt Request'
    model_verbose_plural = 'Bt Request'

    # field_help_texts = {'field_name': 'Help text for field'}
    field_help_texts = {}
    # field_verbose_names = {'field_name': 'Displayed name for field'}
    field_verbose_names = {}

    # https://docs.djangoproject.com/en/2.0/ref/models/fields/#django.db.models.ForeignKey.on_delete
    # foreign_fields_on_delete = {'field_name': on_delete_action}
    foreign_fields_on_delete = {}

    foreign_fields = [FieldNames.bbg_program_code, FieldNames.bbg_interface_code, FieldNames.bt_requestor_code, FieldNames.bt_status_code, FieldNames.response_format_code, FieldNames.lookback_bt_request_id]
    form_fields = [FieldNames.bt_request_id, FieldNames.bbg_program_code, FieldNames.bbg_interface_code, FieldNames.bt_requestor_code, FieldNames.bt_status_code, FieldNames.response_format_code, FieldNames.lookback_bt_request_id, FieldNames.request_description, FieldNames.request_date, FieldNames.status_date, FieldNames.request_object_data, FieldNames.callback_uri, FieldNames.data_file_path, FieldNames.process_date, FieldNames.retry_count, FieldNames.requestor_login, FieldNames.request_data_hash, FieldNames.row_insert_by, FieldNames.row_insert_date, FieldNames.row_update_by, FieldNames.row_update_date]
    indexed_fields = [FieldNames.bt_request_id, FieldNames.bbg_interface_code, FieldNames.bt_status_code, FieldNames.lookback_bt_request_id, FieldNames.status_date, FieldNames.request_data_hash]
    list_display_fields = [FieldNames.bt_request_id, FieldNames.bbg_program_code, FieldNames.bbg_interface_code, FieldNames.bt_requestor_code, FieldNames.bt_status_code, FieldNames.response_format_code, FieldNames.lookback_bt_request_id, FieldNames.request_description, FieldNames.request_date, FieldNames.status_date, FieldNames.request_object_data, FieldNames.callback_uri, FieldNames.data_file_path, FieldNames.process_date, FieldNames.retry_count, FieldNames.requestor_login, FieldNames.request_data_hash]
    raw_id_fields = foreign_fields
    readonly_fields = [FieldNames.bt_request_id, FieldNames.row_insert_by, FieldNames.row_insert_date, FieldNames.row_update_by, FieldNames.row_update_date]
    to_string_fields = [FieldNames.bt_request_id, FieldNames.bbg_interface_code, FieldNames.bt_status_code, FieldNames.status_date, FieldNames.request_data_hash]

    def get_unicode(self, modelInstance):
        return ' - '.join([unicode(getattr(modelInstance, o))
                           for o in self.to_string_fields
                           if o not in self.foreign_fields])

    def bt_request_id(self):
        return AutoField(verbose_name=u'Bt Request Id', db_column='BT_REQUEST_ID', db_index=True, primary_key=True, help_text='', editable=False)

    def bbg_program_code(self):
        key_name = FieldNames.bbg_program_code

        if model_exists(self, 'bbg_program'):
            if not self.foreign_fields.__contains__(key_name):
                self.foreign_fields.append(key_name)
            return ForeignKey(verbose_name=u'Bbg Program Code', db_column='BBG_PROGRAM_CODE', to='BbgProgram', to_field='bbg_program_code', related_name='%(app_label)s_BtRequest_bbg_program_code', on_delete=self.foreign_fields_on_delete.get(key_name, DEFAULT_ON_DELETE_ACTION), limit_choices_to={}, max_length=20, help_text='', editable=True)
        else:
            if self.foreign_fields.__contains__(key_name):
                self.foreign_fields.remove(key_name)
            return CharField(verbose_name=u'Bbg Program Code', db_column='BBG_PROGRAM_CODE', max_length=20, help_text='', editable=True)

    def bbg_interface_code(self):
        key_name = FieldNames.bbg_interface_code

        if model_exists(self, 'bbg_interface'):
            if not self.foreign_fields.__contains__(key_name):
                self.foreign_fields.append(key_name)
            return ForeignKey(verbose_name=u'Bbg Interface Code', db_column='BBG_INTERFACE_CODE', to='BbgInterface', to_field='bbg_interface_code', related_name='%(app_label)s_BtRequest_bbg_interface_code', on_delete=self.foreign_fields_on_delete.get(key_name, DEFAULT_ON_DELETE_ACTION), limit_choices_to={}, db_index=True, max_length=10, help_text='', editable=True)
        else:
            if self.foreign_fields.__contains__(key_name):
                self.foreign_fields.remove(key_name)
            return CharField(verbose_name=u'Bbg Interface Code', db_column='BBG_INTERFACE_CODE', db_index=True, max_length=10, help_text='', editable=True)

    def bt_requestor_code(self):
        key_name = FieldNames.bt_requestor_code

        if model_exists(self, 'bt_requestor'):
            if not self.foreign_fields.__contains__(key_name):
                self.foreign_fields.append(key_name)
            return ForeignKey(verbose_name=u'Bt Requestor Code', db_column='BT_REQUESTOR_CODE', to='BtRequestor', to_field='bt_requestor_code', related_name='%(app_label)s_BtRequest_bt_requestor_code', on_delete=self.foreign_fields_on_delete.get(key_name, DEFAULT_ON_DELETE_ACTION), limit_choices_to={}, max_length=50, help_text='', editable=True)
        else:
            if self.foreign_fields.__contains__(key_name):
                self.foreign_fields.remove(key_name)
            return CharField(verbose_name=u'Bt Requestor Code', db_column='BT_REQUESTOR_CODE', max_length=50, help_text='', editable=True)

    def bt_status_code(self):
        key_name = FieldNames.bt_status_code

        if model_exists(self, 'bt_status'):
            if not self.foreign_fields.__contains__(key_name):
                self.foreign_fields.append(key_name)
            return ForeignKey(verbose_name=u'Bt Status Code', db_column='BT_STATUS_CODE', to='BtStatus', to_field='bt_status_code', related_name='%(app_label)s_BtRequest_bt_status_code', on_delete=self.foreign_fields_on_delete.get(key_name, DEFAULT_ON_DELETE_ACTION), limit_choices_to={}, db_index=True, max_length=20, help_text='', editable=True)
        else:
            if self.foreign_fields.__contains__(key_name):
                self.foreign_fields.remove(key_name)
            return CharField(verbose_name=u'Bt Status Code', db_column='BT_STATUS_CODE', db_index=True, max_length=20, help_text='', editable=True)

    def response_format_code(self):
        key_name = FieldNames.response_format_code

        if model_exists(self, 'bt_format'):
            if not self.foreign_fields.__contains__(key_name):
                self.foreign_fields.append(key_name)
            return ForeignKey(verbose_name=u'Response Format Code', db_column='RESPONSE_FORMAT_CODE', to='BtFormat', to_field='bt_format_code', related_name='%(app_label)s_BtRequest_response_format_code', on_delete=self.foreign_fields_on_delete.get(key_name, DEFAULT_ON_DELETE_ACTION), limit_choices_to={}, max_length=20, help_text='', editable=True)
        else:
            if self.foreign_fields.__contains__(key_name):
                self.foreign_fields.remove(key_name)
            return CharField(verbose_name=u'Response Format Code', db_column='RESPONSE_FORMAT_CODE', max_length=20, help_text='', editable=True)

    def lookback_bt_request_id(self):
        key_name = FieldNames.lookback_bt_request_id

        if model_exists(self, 'bt_request'):
            if not self.foreign_fields.__contains__(key_name):
                self.foreign_fields.append(key_name)
            return ForeignKey(verbose_name=u'Lookback Bt Request Id', db_column='LOOKBACK_BT_REQUEST_ID', to='BtRequest', to_field='bt_request_id', related_name='%(app_label)s_BtRequest_lookback_bt_request_id', on_delete=self.foreign_fields_on_delete.get(key_name, DEFAULT_ON_DELETE_ACTION), limit_choices_to={}, db_index=True, null=True, blank=True, help_text='', editable=True)
        else:
            if self.foreign_fields.__contains__(key_name):
                self.foreign_fields.remove(key_name)
            return IntegerField(verbose_name=u'Lookback Bt Request Id', db_column='LOOKBACK_BT_REQUEST_ID', db_index=True, null=True, blank=True, help_text='', editable=True)

    def request_description(self):
        return TextField(verbose_name=u'Request Description', db_column='REQUEST_DESCRIPTION', max_length=250, help_text='', editable=True)

    def request_date(self):
        return DateTimeField(verbose_name=u'Request Date', db_column='REQUEST_DATE', help_text='', editable=True)

    def status_date(self):
        return DateTimeField(verbose_name=u'Status Date', db_column='STATUS_DATE', db_index=True, help_text='', editable=True)

    def request_object_data(self):
        field = CodeHighlightField(verbose_name=u'Request Object Data', db_column='REQUEST_OBJECT_DATA', null=True, blank=True, max_length=1073741832, help_text='', editable=True)
        field.code_mode = 'json'
        return field

    def callback_uri(self):
        return TextField(verbose_name=u'Callback Uri', db_column='CALLBACK_URI', null=True, blank=True, max_length=2000, help_text='', editable=True)

    def data_file_path(self):
        return TextField(verbose_name=u'Data File Path', db_column='DATA_FILE_PATH', null=True, blank=True, max_length=500, help_text='', editable=True)

    def process_date(self):
        return DateTimeField(verbose_name=u'Process Date', db_column='PROCESS_DATE', null=True, blank=True, help_text='', editable=True)

    def retry_count(self):
        return IntegerField(verbose_name=u'Retry Count', db_column='RETRY_COUNT', default='0', help_text='', editable=True)

    def requestor_login(self):
        return CharField(verbose_name=u'Requestor Login', db_column='REQUESTOR_LOGIN', max_length=50, help_text='', editable=True)

    def request_data_hash(self):
        return BigIntegerField(verbose_name=u'Request Data Hash', db_column='REQUEST_DATA_HASH', db_index=True, help_text='', editable=True)

    def row_insert_by(self):
        return CharField(verbose_name=u'Row Insert By', db_column='ROW_INSERT_BY', max_length=50, help_text='', editable=False)

    def row_insert_date(self):
        return DateTimeField(verbose_name=u'Row Insert Date', db_column='ROW_INSERT_DATE', auto_now_add=True, help_text='', editable=False)

    def row_update_by(self):
        return CharField(verbose_name=u'Row Update By', db_column='ROW_UPDATE_BY', max_length=50, help_text='', editable=False)

    def row_update_date(self):
        return DateTimeField(verbose_name=u'Row Update Date', db_column='ROW_UPDATE_DATE', auto_now=True, help_text='', editable=False)

