
import logging
from sqlalchemy import or_
import os
import json
import getpass
import pandas as pd
from shutil import copyfile
from etl.core.util import parse_args
import sys
from etl.repo.pim_da import DatsBbgSeriesReqRepo
from etl.bbg_transport.dto import RequestDataItem, RequestItem, RequestOptionItem
from etl.enum.pim_da.gen.bbg_program import BbgProgramEnum
from etl.core.util import uri_get, uri_post
from etl.repo.fnd_cfdw.etl_app_config import EtlAppConfigRepo
from etl.repo.pim_da import DatsBtReqRepo, DatsBbgSeriesinBtReqRepo
from etl.enum.pim_da.gen.dats_series_req_status import DatsSeriesReqStatusEnum
from etl.enum.cor_da.gen.bt_status import BtStatusEnum
from dats_batch_config import DatsBtBatchClientConfig
USAGE = ['DATS BBG Agent', ['option', {'help': 'REQUEST or POLL'}]]

GETDATA = BbgProgramEnum.GETDATA.value
GETHISTORY = BbgProgramEnum.GETHISTORY.value

SUCCESS = BtStatusEnum.SUCCESS.value
PENDING = BtStatusEnum.PENDING .value
INITIAL = BtStatusEnum.INITIAL.value
BTERROR = BtStatusEnum.BTERROR.value
BBGEEROR = BtStatusEnum.BBGERROR.value

NEW = DatsSeriesReqStatusEnum.NEW.value
MIS = DatsSeriesReqStatusEnum.MIS.value
REC = DatsSeriesReqStatusEnum.REC.value
DER = DatsSeriesReqStatusEnum.DER.value
SUB = DatsSeriesReqStatusEnum.SUB.value
CAN = DatsSeriesReqStatusEnum.CAN.value

MAX = 5


class FetcherAgent(object):

    # NO_ITEMS_PROCESSED = 100
    # ITEMS_PROCESSED = 0

    def __init__(self):
        self.log = logging.getLogger("{}".format(
            os.path.splitext(os.path.basename(__file__))[0]))
        self.username = getpass.getuser()
        # self._result = self.NO_ITEMS_PROCESSED
        self._config = DatsBtBatchClientConfig()

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):
        if exc_type is None:
            pass

    def get_request(self):
        pass

    def update_request(self, response, df=None, payload=None):
        pass

    @staticmethod
    def _get_config(config_code):
        config_objs = EtlAppConfigRepo().list_by_app_code('DATS_BATCH')
        batch_config = {config.config_code: config.config_value for config in config_objs}
        return batch_config.get(config_code)

    @staticmethod
    def series_req_status_code_update(code, bbg_series_req_id, inc=0):
        try:
            logging.info(
                'Updating the Dats_Bbg_Series_Req Table with {0} for '
                'bbg_series_req_id:{1}'.format(code, str(bbg_series_req_id)))
            update_row = DatsBbgSeriesReqRepo().get_by_bbg_series_req_id(str(bbg_series_req_id))
            update_row.series_req_status_code = code
            update_row.retry_count = int(update_row.retry_count) + inc
            DatsBbgSeriesReqRepo().save(update_row)
        except Exception as err:
            logging.exception(
                '' +
                err.message)


class RequestAgent(FetcherAgent):
    def __init__(self):
        super(RequestAgent, self).__init__()

    def get_request(self):
        try:
            logging.info('Acquiring requests from DATS_BBG_SERIES_REQ table')
            data = DatsBbgSeriesReqRepo().list_by_series_req_status_code(NEW)
            data = self.check_retry_count(data)
            return data
        except Exception as err:
            logging.exception(err.message)

    def check_retry_count(self, data):
        cancel_rows = [i for i in data if i.retry_count > MAX]
        data = [row for row in data if row not in cancel_rows]
        if cancel_rows:
            for row in cancel_rows:
                self.series_req_status_code_update(CAN, row.bbg_series_req_id)
        return data

    @staticmethod
    def get_batch(data):
        rows = []
        for i in data:
            rows.append(i.__dict__)
        df = pd.DataFrame(rows)
        if not df.empty:
            df = df.drop('_sa_instance_state', axis=1)
            df.fillna(value=1, inplace=True)
            grouped_df = df.groupby(['data_start_date_key', 'data_end_date_key', 'bbg_program_code',
                                     'bbg_interface_code', 'header_options_list', 'overrides_list', 'is_full'])
        else:
            grouped_df = None
        return grouped_df

    def get_request_object(self, batch):
        logging.info('Preparing the Request Object')
        data_items = [RequestDataItem(tag=row['dats_code'], bbg_query=row['bbg_query'])
                      for index, row in batch.iterrows()]
        headers = self.get_headers(batch)
        fields = self.get_request_fields(batch)
        request_options = [RequestOptionItem(option_name=key, option_value=headers[key])
                           for key in headers]
        request = RequestItem(request_description=self._config.dats_bt_endpoint_code,
                              requestor_code=self._config.dats_bt_req_code_code,
                              program_code=batch.iloc[0]['bbg_program_code'],
                              interface_code=batch.iloc[0]['bbg_interface_code'],
                              response_format_code=self._config.dats_bt_format_code,
                              request_data_items=data_items,
                              request_options=request_options,
                              request_fields=fields)
        logging.info('Converting the Request Object to json format')
        return json.dumps(request.to_json())

    @staticmethod
    def get_header_options_list(batch):
        options = batch.iloc[0]['header_options_list'].split(',')
        header = {element.partition('=')[0].strip(): element.partition('=')[2].strip() for element in options}
        return header

    def get_headers(self, batch):
        headers = self._config.bt_request_items
        gh_range = str(int(batch.iloc[0]['data_start_date_key'])
                       ).strip('1')+"|" + str(int(batch.iloc[0]['data_end_date_key'])).strip('1')
        pc_dict = {GETDATA: [GETDATA], GETHISTORY: [GETHISTORY, gh_range]}
        if batch.iloc[0]['bbg_program_code'] == GETHISTORY:
            headers['DATERANGE'] = pc_dict[batch.iloc[0]['bbg_program_code']][1]
        # headers['PROGRAMFLAG'] = self._get_config('PROGRAMFLAG')
        # headers['COMPRESS'] = self._get_config('COMPRESS')
        # headers['FIRMNAME'] = self._get_config('FIRMNAME')
        headers['PROGRAMNAME'] = pc_dict[batch.iloc[0]['bbg_program_code']][0]
        # headers['USERNUMBER'] = self._get_config('USERNUMBER')
        if batch.iloc[0]['header_options_list'] and str(batch.iloc[0]['header_options_list']) != '1':
            headers.update(self.get_header_options_list(batch))
        return headers

    @staticmethod
    def get_request_fields(batch):
        request_fields_list = []
        for index, row in batch.iterrows():
            request_fields_list.append(row['mnemonic'])
        return list(set(request_fields_list))

    def post_to_bt(self, payload):
        base_url = self._config.dats_bt_endpoint_code
        try:
            logging.info('Submitting requests to Bloomberg Transport')
            response = uri_post(base_url + 'request_data', payload)
            logging.info('response: %s \r\nresponse:\t%s', base_url, response)
            return response
        except Exception as err:
            logging.exception(err.message)

    def update_request(self, response, df=None, payload=None):
        try:
            logging.info('Updating DATS_BT_REQ TABLE with response from BT')
            if response['request_status'] == SUCCESS:
                response['request_status'] = PENDING
            row = DatsBtReqRepo().instance.model(bt_request_id=(response['request_id']),
                                                 bt_status_code=response['request_status'],
                                                 bt_request_payload=payload)
            DatsBtReqRepo().save(row)
            for bbg_series_req_id in df["bbg_series_req_id"].tolist():
                self.series_req_status_code_update(SUB, bbg_series_req_id, 1)
        except Exception as err:
            logging.exception(
                'update_requests: ' +
                err.message)
            return False

    def submit_to_bt(self, batches):
        for batch in batches:
            payload = self.get_request_object(batch[1].reset_index())
            response = self.post_to_bt(payload)
            self.update_request(response, batch[1], payload)
            self.make_entry(batch[1], response)

    @staticmethod
    def make_entry(df, response):
        try:
            row = DatsBtReqRepo().get_by_bt_request_id(response['request_id'])
            dats_bt_req_id = row[0].dats_bt_req_id
            logging.info('Making entries into DATS_BBG_SERIES_IN_BT_REQ table')
            for column in df['bbg_series_req_id'].tolist():
                ins = DatsBbgSeriesinBtReqRepo().\
                    instance.model(dats_bt_req_id=dats_bt_req_id, bbg_series_req_id=int(column))
                DatsBtReqRepo().save(ins)
        except Exception as err:
            logging.exception(
                'update_requests: ' +
                err.message)

    def run(self):
        data = self.get_request()
        batches = self.get_batch(data)
        if batches:
            self.submit_to_bt(batches)
        return 0


class ResponseAgent(FetcherAgent):

    def __init__(self):
        super(ResponseAgent, self).__init__()

    def get_request(self):
        try:
            logging.info('Acquiring requests from DATS_BBG_SERIES_REQ table')
            repo = DatsBtReqRepo()
            model = repo.model
            data = repo.query.filter(or_(model.bt_status_code == INITIAL, model.bt_status_code == PENDING)).all()
            return data
        except Exception as err:
            logging.exception(err.message)

    def get_request_status_by_url(self, bt_request_id):
        base_url = self._config.dats_bt_endpoint_code
        logging.info('Sending the check status request to BT')
        logging.info('GET: %s, \r\n\t%s', base_url, str(bt_request_id))
        try:
            response = uri_get(base_url + 'check_status' + '/' + str(bt_request_id))
            logging.info('response: %s \r\nresponse:\t%s', base_url, response)
            return response
        except Exception as ex:
            logging.error(ex)

    @staticmethod
    def get_tags(row):
        dict_ = json.loads(row.bt_request_payload)
        return [x['tag'] for x in dict_['request_data_items']]

    def update_request(self, response, df=None, payload=None):
        try:
            logging.info('Updating DATS_BT_REQ TABLE with response from BT')
            row = DatsBtReqRepo().get_by_dats_bt_req_id(df.dats_bt_req_id)
            row.bt_status_code = response['request_status']
            row.bt_response_file_path = response['data_file_path']
            DatsBtReqRepo().save(row)
        except Exception as err:
            logging.exception(
                '' +
                err.message)
            return False

    def copy_file(self, src, row):
        tags = self.get_tags(row)
        series_req_row = DatsBbgSeriesReqRepo().get_by_dats_code(tags[0])
        dst = self._config.dats_bt_file_path_code
        if os.path.isdir(dst):
            destination_file = os.path.basename(src)
            date, req_id, ext = destination_file.split('.')
            if series_req_row.is_full:
                ext = '.full' + '.' + ext
            else:
                ext = '.inc' + '.' + ext
            destination_file = 'BBG_' + date + '_' + \
                               str(row.dats_bt_req_id) + '_' + req_id + '_' + series_req_row.bbg_program_code + ext
            dst = os.path.join(dst, destination_file)
            logging.info("Copying %s to %s", src, dst)
            copyfile(src, dst)
        else:
            logging.info("Can't copy %s to destination: %s", src, dst)
            raise Exception('Destination path is incorrect: %s', dst)

    def run(self):
        rows = self.get_request()
        for row in rows:
            response = self.get_request_status_by_url(row.bt_request_id)
            if response['request_status'] == SUCCESS:
                self.copy_file(response['data_file_path'], row)
            self.update_request(response, row)

if __name__ == '__main__':
    args = parse_args(*USAGE).option.upper()
    if args == 'REQUEST':
        agent = RequestAgent()
    elif args == 'POLL':
        agent = ResponseAgent()
    else:
        raise RuntimeError('Unknown option specified: {}'.format(args))
    with agent.run() as x:
        sys.exit(x)
