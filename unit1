import json
import pytest
import requests
from pimco_live import agent
from etl.core.util import uri_get, uri_post

from pytest import fixture

from etl.repo.pim_pm.pl_bbg_batch import PlBbgBatchRepo

BASE_URL = 'http://ptp-dev/workshop/service/da/bbg_transport/'
GET_URL = '{}check_status'.format(BASE_URL)
POST_URL = '{}request_data/'.format(BASE_URL)
src = '/appl/da_dev/da_data/bbg_transport/in/20180601.9998.csv'
dest = '/appl/da_dev/da_data/ff_pl/in/'
program_code = 'GETDATA'
obj = {
    '_config': None,
    'request_options': [{
        'option_name': 'DATERANGE',
        'option_value': '20180514|20180514'
    }],
    '_validation_errors': None,
    'request_description': 'PIMCO_LIVE',
    'request_data_items': [{
        'cusip': None,
        'yellow_key': 'Comdty',
        'bb_id': None,
        'tag': 'EDM87-LAST_TRADEABLE_DT',
        'isin': None,
        'bbg_query': None,
        'ticker': 'EDM87'
    }, {
        'cusip': None,
        'yellow_key': 'Comdty',
        'bb_id': None,
        'tag': 'EDU89-LAST_TRADEABLE_DT',
        'isin': None,
        'bbg_query': None,
        'ticker': 'EDU89'
    }, {
        'cusip': None,
        'yellow_key': 'Comdty',
        'bb_id': None,
        'tag': 'EDZ89-LAST_TRADEABLE_DT',
        'isin': None,
        'bbg_query': None,
        'ticker': 'EDZ89'
    },
        {
            'cusip': None,
            'yellow_key': 'Comdty',
            'bb_id': None,
            'tag': 'EDH90-LAST_TRADEABLE_DT',
            'isin': None,
            'bbg_query': None,
            'ticker': 'EDH90'
        }
    ],
    'program_code': 'GETDATA',
    'requestor_code': 'DA.PIMCOLIVE.DEV',
    'request_fields': ['LAST_TRADEABLE_DT'],
    'interface_code': 'DL',
    'callback_uri': None,
    'response_format_code': 'VERTICAL'
}
objj = json.dumps(obj)


@fixture(scope="module")
def repo():
    return PlBbgBatchRepo()


@pytest.mark.parametrize("test_input,expected_output", [
    (9999, 'SUCCESS'),
    (9998, 'SUCCESS')
])
def test_get(test_input, expected_output):
    response = uri_get(GET_URL + '/' + str(test_input))
    assert response['request_status'] == expected_output


def test_post():
    payload = json.dumps(objj)
    response = uri_post(POST_URL, payload)
    assert response.status_code == 200


@pytest.mark.parametrize("test_input,expected_output", [
    (12345, 1)
])
def test_get_fail(test_input, expected_output):
    try:
        uri_get(GET_URL + '/' + str(test_input))
    except:
        flag = 1
    assert flag == expected_output


def test_get_request(repo):
    result = agent.FetcherAgent.get_request(repo, 'req')
    assert type(result) == list


def test_get_priority_list(repo):
    result = agent.RequestAgent().get_request(repo, 'req')
    plist = agent.RequestAgent().get_priority_list(result)
    assert type(plist) == list


@pytest.mark.parametrize("test_input", [
    ([datalist],), ([historylist],)
])
def test_get_priority_list_by_interface_code(test_input):
    plist = agent.RequestAgent().get_priority_list_by_interface_code(test_input)
    assert type(plist) == list


def test_update_request(repo):
    batch_id
    bt_request_id
    bt_status_code
    request_obj
    flag = 0
    try:
        agent.RequestAgent().update_request(repo)
    except:
        flag = 1
    assert flag == 0

def test_copy_file():
    rv = agent.ResponseAgent().copy_file(src, dest, program_code)
    if rv:
        assert True
