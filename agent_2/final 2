#!/usr/bin/env python

"""
Post request and get response From Bloomberg Transport.
"""

import getpass
import json
import logging
import os
import sys

from sqlalchemy import or_
from sqlalchemy.exc import DBAPIError

from etl.bbg_transport.dto import RequestDataItem, RequestItem, RequestOptionItem
from etl.core.util import uri_get, uri_post
from etl.repo.fnd_cfdw.etl_config import EtlConfigRepo
from etl.repo.pim_pm.pl_bbg_batch import PlBbgBatchRepo
from etl.repo.pim_pm.pl_bbg_batch_series_vw import PlBbgBatchSeriesVwRepo


class FetcherAgent(object):
    """

    """

    def __init__(self):
        self.log = logging.getLogger("{}".format(
            os.path.splitext(os.path.basename(__file__))[0]))
        logging.info('Fetching the required values from the EtlConfig Repo')
        self.USERNAME = getpass.getuser()

    def __enter__(self):
        # make a database connection and return it
        return self

    def __exit__(self, exc_type, exc_value, exc_traceback):

        if exc_type is None:
            # No exception
            pass


class RequestAgent(FetcherAgent):
    """

    """

    def __init__(self):
        super(RequestAgent, self).__init__()

        try:
            rec = EtlConfigRepo.instance.get_by_config_code('PL_BT_ENDPOINT')
            self.base_url = rec.config_value
            rec = EtlConfigRepo.instance.get_by_config_code('PL_BT_DESCRIPTION')
            self.description = rec.config_value
            rec = EtlConfigRepo.instance.get_by_config_code('PL_BT_FORMAT')
            self.response_format = rec.config_value
            rec = EtlConfigRepo.instance.get_by_config_code('PL_BT_REQUESTOR_CODE')
            self.requestor_code = rec.config_value
        except Exception as ex:
            self.log.critical(
                "Unable to initialize %s: %s", self.__class__.__name__, ex)
            raise

    @staticmethod
    def get_request(repo):
        """
        get_request(repo) -> Object

        Return object with IN_QUEUE as batch_status_code.
        :param repo: Object
        :return: Object
        """
        model = repo.model
        try:
            logging.info('Getting all the requests from pl_bbg_batch table with IN_QUEUE status')
            data = repo.query.filter(model.batch_status_code == 'IN_QUEUE').all()
            return data
        except DBAPIError as err:
            logging.error(err)

    def get_priority_list(self, result):
        """
        get_priority_list(result) -> List of Objects
        Return prioritized list of Objects

        :param result: Object
        :return: List of Objects
        """

        logging.info('Prioritizing the list as per bbg_program_code '
                     'with GETDATA as high priority')
        data_list = list()
        history_list = list()
        for i in result:
            if i.bbg_program_code == 'GETDATA':
                data_list.append(i)
            else:
                history_list.append(i)
        data_list = self.get_priority_list_by_interface_code(data_list)
        history_list = self.get_priority_list_by_interface_code(history_list)
        plist = data_list + history_list
        return plist

    @staticmethod
    def get_priority_list_by_interface_code(result):
        """
        get_priority_list_by_interface_code(result) -> List of Objects
        Return prioritized list of Objects

        :param result: Object
        :return: List of Objects
        """
        logging.info('Re-Prioritizing the list as per bbg_interface_code,'
                     'with SAPI as high priority')
        plist = []
        for i in result:
            if i.bbg_interface_code == 'SAPI':
                plist.insert(0, i)
            else:
                plist.append(i)
        return plist

    def get_request_object(self, obj, result_series):
        """
        get_request_object(self, obj, result_series) -> Json
        Return Json constructed from the input objects.
        :param obj: Object
        :param result_series: Object
        :return: Json
        """
        logging.info('Preparing the Request Object')
        data_items = [RequestDataItem(tag=i.pl_series_code, yellow_key=i.bbg_yellow,
                                      ticker=i.bbg_ticker) for i in result_series]
        headers = self.get_headers(obj)
        fields = self.get_request_fields(result_series)
        request_options = [RequestOptionItem(option_name=key, option_value=headers[key])
                           for key in headers]
        request = RequestItem(request_description=self.description,
                              requestor_code=self.requestor_code,
                              program_code=obj.bbg_program_code,
                              interface_code=obj.bbg_interface_code,
                              response_format_code=self.response_format,
                              request_data_items=data_items,
                              request_options=request_options,
                              request_fields=fields)
        logging.info('Converting the Request Object to json format')
        payload = json.dumps(request.to_json())
        return payload

    @staticmethod
    def get_headers(obj):
        """
        Return string of value obtained from Object.
        get_headers(obj) -> str
        :param obj: Object
        :return: str
        """

        headers = dict()
        if obj.bbg_program_code == "GETDATA":
            headers['DATERANGE'] = str(obj.asof_end_date_key) + \
                                   "|" + str(obj.asof_end_date_key)

        elif obj.bbg_program_code == "GETHISTORY":
            headers['DATERANGE'] = str(obj.asof_start_date_key) + \
                                   "|" + str(obj.asof_end_date_key)
        return headers

    @staticmethod
    def get_request_fields(result_series):
        """
        Return List obtained from Object.
        get_request_fields(result_series) -> List
        :param result_series:
        :return:
        """
        request_fields_list = []
        for i in result_series:
            request_fields_list.append(i.bbg_mnemonic)

        return list(set(request_fields_list))

    def post_to_bt(self, payload):
        """
        post_to_bt(payload) -> Json
        Return Json, response from BT
        :param payload: Json
        :return: Json
        """
        logging.info('Sending the request to BT')
        logging.info('POST: %s, \r\n\t%s', self.base_url, payload)
        try:
            response = uri_post(self.base_url + 'request_data', payload)
            logging.info('response: %s \r\nresponse:\t%s', self.base_url, response)
            return response
        except Exception as ex:
            logging.error(ex)

    @staticmethod
    def update_request(batch_id, bt_request_id, bt_status_code,
                       request_obj, batch_status_code, repo):
        """
        :param batch_id: Int
        :param bt_request_id: Int
        :param bt_status_code: Str
        :param request_obj: Json
        :param batch_status_code: Str
        :param repo: Object
        """

        logging.info('Updating the staging the table with the status of the request')
        model = repo.model
        try:
            update_row = repo.query.filter(model.batch_status_code == 'IN_QUEUE',
                                           model.batch_id == batch_id).all()
            update_row[0].batch_status_code = batch_status_code
            update_row[0].bt_request_id = bt_request_id
            update_row[0].bt_status_code = bt_status_code
            update_row[0].bt_request_payload = request_obj
            repo.save(update_row)
        except DBAPIError as ex:
            logging.error(ex)

    def run(self):
        result = self.get_request(PlBbgBatchRepo())
        priority_list = self.get_priority_list(result)
        for i in priority_list:
            logging.info("Fetching the records with batch_id" + ' ' + str(i.batch_id))
            repo = PlBbgBatchSeriesVwRepo()
            model = repo.model
            try:
                result_batch = repo.query.filter(model.batch_id == i.batch_id).all()
                obj = self.get_request_object(i, result_batch)
                response = self.post_to_bt(obj)
                self.update_request(i.batch_id, response['request_id'],
                                    str(response['request_status']),
                                    str(obj), 'SENT_TO_BT', PlBbgBatchRepo())
            except Exception as ex:
                logging.error(ex)


class ResponseAgent(FetcherAgent):
    """

    """

    def __init__(self):
        super(ResponseAgent, self).__init__()
        try:
            rec = EtlConfigRepo.instance.get_by_config_code('PL_BT_ENDPOINT')
            self.base_url = rec.config_value
        except Exception as ex:
            self.log.critical(
                "Unable to initialize %s: %s", self.__class__.__name__, ex)

    @staticmethod
    def get_request(repo):
        """
        get_request(repo) -> Object
        Return object with SENT_TO_BT as batch_status_code.
        :param repo: Object
        :return: Object
        """
        model = repo.model
        try:
            logging.info('Get request from pl_bbg_batch table with SENT_TO_BT status')
            data = repo.query.filter(
                or_(model.batch_status_code == 'SENT_TO_BT',
                    model.batch_status_code == 'PENDING')).all()
            return data
        except DBAPIError as err:
            logging.error(err)

    def get_request_status_by_url(self, obj):
        """
        Return Json by GET method.
        :param obj: Object
        :return: Json
        """
        logging.info('Sending the check status request to BT')
        logging.info('GET: %s, \r\n\t%s', self.base_url, str(obj.bt_request_id))
        try:
            response = uri_get(self.base_url + 'check_status' + '/' + str(obj.bt_request_id))
            logging.info('response: %s \r\nresponse:\t%s', self.base_url, response)
            return response
        except Exception as ex:
            logging.error(ex)

    @staticmethod
    def update_request(batch_id, data_file_path,
                       bt_request_id, bt_status_code, repo):
        """
        :param batch_id: Int
        :param data_file_path: Str
        :param bt_request_id: Int
        :param bt_status_code: Str
        :param repo: Object
        """

        logging.info('Updating the staging the table with the status of the request')
        model = repo.model
        try:
            update_row = repo.query.filter(model.bt_request_id == bt_request_id,
                                           model.batch_id == batch_id).all()
            update_row[0].bt_status_code = bt_status_code
            if update_row[0].bt_status_code == 'BBGERROR':
                update_row[0].batch_status_code = 'BBG_ERROR'
            elif update_row[0].bt_status_code == 'BTERROR':
                update_row[0].batch_status_code = 'BT_ERROR'
            update_row[0].bt_response_file_path = data_file_path
            repo.save(update_row)
        except DBAPIError as err:
            logging.error(err)

    def run(self):
        result = self.get_request(PlBbgBatchRepo())
        for i in result:
            response = self.get_request_status_by_url(i)
            self.update_request(i.batch_id, response['data_file_path'], response['request_id'],
                                response['request_status'], PlBbgBatchRepo())


def main():
    """
    Delegates all processing to Agent instance.
    """
    logger = logging.getLogger("{}".format(
        os.path.splitext(os.path.basename(__file__))[0]))

    try:
        logging.info("Request Agent started")
        with RequestAgent() as agent:
            agent.run()

    except Exception as ex:
        logger.critical("Request Agent exited with error: %s", ex)
        return -1
    else:
        logger.info("Request Agent completed successfully.")

    try:
        logging.info("Response Agent started")
        with ResponseAgent() as agent:
            agent.run()
    except Exception as ex:
        logger.critical("Response Agent exited with error: %s", ex)
        return -1
    else:
        logger.info("Response Agent completed successfully.")
    return 0


if __name__ == "__main__":
    sys.exit(main())
